name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Linting and Code Quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black (Code Formatting)
        continue-on-error: true
        run: |
          echo "🔍 Checking code formatting with Black..."
          if ! black --check --diff --color . | head -50; then
            echo ""
            echo "::warning::Black formatting issues found. Run 'black .' to fix automatically."
            echo "📊 Total files that need formatting:"
            black --check . 2>&1 | grep -c "would reformat" || echo "Multiple files"
          else
            echo "✅ All files are properly formatted with Black"
          fi

      - name: Run isort (Import Sorting)
        continue-on-error: true
        run: |
          echo "🔍 Checking import sorting with isort..."
          if ! isort --check-only --diff .; then
            echo "::warning::Import sorting issues found. Run 'isort .' to fix automatically."
          else
            echo "✅ All imports are properly sorted"
          fi

      - name: Run Flake8 (Critical Syntax Errors Only)
        run: |
          echo "🔍 Checking for critical syntax errors with Flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "✅ No critical syntax errors found"

      - name: Run Bandit (Security Linting)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety (Dependency Security Check)
        run: safety check --json --output safety-report.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          if-no-files-found: ignore

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_guideme
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          # Wait for postgres container to be ready using curl instead of pg_isready
          echo "Waiting for PostgreSQL container to be ready..."
          for i in {1..30}; do
            if docker exec $(docker ps -q -f "ancestor=pgvector/pgvector:pg17") pg_isready -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Attempt $i/30: PostgreSQL not ready, waiting..."
            sleep 2
          done

      - name: Set up environment variables
        run: |
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_guideme" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
          echo "GROQ_API_KEY=test-key" >> .env
          echo "GOOGLE_API_KEY=test-key" >> .env
          echo "FLASHCARD=test-key" >> .env
          echo "TESTING=True" >> .env

      - name: Run Django migrations
        run: |
          python manage.py migrate --noinput

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage xml
          coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            .coverage

  # Security Scan
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: "trivy-results.sarif"

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: guideme:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Test Docker image
        run: |
          docker run --rm \
            -e DEBUG=False \
            -e SECRET_KEY=test-secret-key-for-docker \
            -e GROQ_API_KEY=test-key \
            -e GOOGLE_API_KEY=test-key \
            -e FLASHCARD=test-key \
            -e ALLOWED_HOSTS=localhost,127.0.0.1 \
            guideme:test python manage.py check --deploy
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_guideme
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust

      - name: Set up test environment
        run: |
          echo "DEBUG=False" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_guideme" >> .env
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput

      - name: Run performance tests
        run: |
          python manage.py runserver &
          sleep 10
          # Add your locust performance tests here
          # locust -f performance_tests.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8000

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Staging
        run: |
          # Add Railway CLI deployment commands for staging
          echo "Deploying to staging environment..."
          # railway login --token ${{ secrets.RAILWAY_STAGING_TOKEN }}
          # railway up --service staging

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Production
        run: |
          # Add Railway CLI deployment commands for production
          echo "Deploying to production environment..."
          # railway login --token ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          # railway up --service production

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline

            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify on Success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Discord/Email notification here

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification here
