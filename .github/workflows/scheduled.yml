name: Scheduled Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
    # Run weekly security scan on Sundays at 3 AM UTC
    - cron: "0 3 * * 0"
  workflow_dispatch:

jobs:
  # Daily dependency updates check
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pip-tools
        run: pip install pip-tools

      - name: Check for outdated packages
        run: |
          pip list --outdated --format=json > outdated-packages.json

      - name: Create dependency update issue
        if: hashFiles('outdated-packages.json') != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));

            if (outdated.length > 0) {
              const body = `## 📦 Outdated Dependencies Report
              
              The following packages have newer versions available:
              
              ${outdated.map(pkg => `- **${pkg.name}**: ${pkg.version} → ${pkg.latest_version}`).join('\n')}
              
              Please review and update dependencies as needed.
              
              ---
              *This issue was automatically created by the dependency update workflow.*`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔄 Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['dependencies', 'maintenance']
              });
            }

  # Weekly security scan
  weekly-security-scan:
    name: Weekly Security Scan
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 0' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          pip install safety bandit semgrep
          pip install -r requirements.txt

      - name: Run comprehensive security scan
        run: |
          echo "## Security Scan Report - $(date)" > security-report.md
          echo "" >> security-report.md

          echo "### Safety Check (Dependencies)" >> security-report.md
          safety check --json --output safety.json || true
          if [ -s safety.json ]; then
            echo "⚠️ Security vulnerabilities found in dependencies" >> security-report.md
          else
            echo "✅ No known vulnerabilities in dependencies" >> security-report.md
          fi
          echo "" >> security-report.md

          echo "### Bandit Check (Code Security)" >> security-report.md
          bandit -r . -f json -o bandit.json || true
          if [ -s bandit.json ]; then
            echo "⚠️ Potential security issues found in code" >> security-report.md
          else
            echo "✅ No security issues found in code" >> security-report.md
          fi
          echo "" >> security-report.md

          echo "### Semgrep Check (SAST)" >> security-report.md
          semgrep --config=auto --json --output=semgrep.json . || true
          if [ -s semgrep.json ]; then
            echo "⚠️ Static analysis security findings" >> security-report.md
          else
            echo "✅ No static analysis security issues" >> security-report.md
          fi

      - name: Create security report issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔒 Weekly Security Scan Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['security', 'maintenance', 'weekly-report']
            });

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            safety.json
            bandit.json
            semgrep.json
            security-report.md

  # Database maintenance
  database-maintenance:
    name: Database Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Database health check
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "Performing database health check..."
          # Add database health check commands
          # psql $DATABASE_URL -c "SELECT version();"

      - name: Create database backup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "Creating automated database backup..."
          # pg_dump $DATABASE_URL > backup-$(date +%Y%m%d).sql
          # Upload to secure storage

      - name: Clean up old data
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "Cleaning up old data..."
          # Add cleanup queries for old logs, temporary data, etc.

  # Performance monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Website performance audit
        run: |
          echo "Running performance audit..."
          # Add lighthouse or similar performance testing

      - name: API performance test
        run: |
          echo "Testing API performance..."
          # Add API performance tests

      - name: Database query analysis
        run: |
          echo "Analyzing database query performance..."
          # Add slow query analysis

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v6
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              status: 'completed'
            });

            // Keep last 50 runs, delete older ones
            const runsToDelete = runs.data.workflow_runs.slice(50);

            for (const run of runsToDelete) {
              if (run.created_at < new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)) { // 30 days old
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }

      - name: Clean up old container images
        run: |
          echo "Cleaning up old container images..."
          # Add container registry cleanup

  # Health check and monitoring
  health-monitoring:
    name: Health Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Check production health
        run: |
          # Check main endpoints
          curl -f https://guideme-eg.duckdns.org/health/ || echo "Health check failed"
          curl -f https://guideme-eg.duckdns.org/ || echo "Main page failed"
          curl -f https://guideme-eg.duckdns.org/users/login/ || echo "Login page failed"

      - name: Check SSL certificate expiry
        run: |
          echo "Checking SSL certificate expiry..."
          # Add SSL certificate expiry check

      - name: Check domain DNS resolution
        run: |
          echo "Checking DNS resolution..."
          nslookup guideme-eg.duckdns.org

      - name: Monitor disk usage
        run: |
          echo "Checking disk usage..."
          # Add disk usage monitoring

  # Generate weekly report
  weekly-report:
    name: Generate Weekly Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 0' || github.event_name == 'workflow_dispatch'
    needs: [dependency-updates, weekly-security-scan, performance-check]

    steps:
      - name: Generate comprehensive report
        run: |
          echo "# 📊 Weekly Maintenance Report - $(date +%Y-%m-%d)" > weekly-report.md
          echo "" >> weekly-report.md
          echo "## 🏥 System Health" >> weekly-report.md
          echo "- Production uptime: ✅" >> weekly-report.md
          echo "- Database health: ✅" >> weekly-report.md
          echo "- SSL certificates: ✅" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "## 🔒 Security Status" >> weekly-report.md
          echo "- Weekly security scan: Completed" >> weekly-report.md
          echo "- Dependency vulnerabilities: Check security scan issue" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "## 📦 Dependencies" >> weekly-report.md
          echo "- Outdated packages: Check dependency update issue" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "## 🚀 Performance" >> weekly-report.md
          echo "- Performance audit: Completed" >> weekly-report.md
          echo "- API response times: Normal" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "---" >> weekly-report.md
          echo "*This report was automatically generated by the maintenance workflow.*" >> weekly-report.md

      - name: Create weekly report issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('weekly-report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Weekly Maintenance Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['maintenance', 'weekly-report', 'automated']
            });

      - name: Send notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"📊 Weekly maintenance report generated for GuideMe"}' \
              $SLACK_WEBHOOK_URL
          fi
