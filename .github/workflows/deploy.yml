name: Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-guideme.up.railway.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway Staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service staging --detach

      - name: Wait for deployment
        run: |
          sleep 60  # Wait for deployment to complete

      - name: Health Check
        run: |
          curl -f https://staging-guideme.up.railway.app/health/ || exit 1

      - name: Run Smoke Tests
        run: |
          # Add smoke tests for staging environment
          curl -f https://staging-guideme.up.railway.app/ || exit 1
          curl -f https://staging-guideme.up.railway.app/users/login/ || exit 1

  # Integration Tests on Staging
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install test dependencies
        run: |
          pip install requests pytest selenium webdriver-manager

      - name: Run integration tests
        env:
          STAGING_URL: https://staging-guideme.up.railway.app
        run: |
          # Add integration test commands here
          # pytest integration_tests/ --base-url=$STAGING_URL

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results/

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, integration-tests]
    if: |
      (github.ref == 'refs/heads/main' && needs.integration-tests.result == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://guideme-eg.duckdns.org

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway Production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service production --detach

      - name: Wait for deployment
        run: |
          sleep 120  # Wait longer for production deployment

      - name: Production Health Check
        run: |
          curl -f https://guideme-eg.duckdns.org/health/ || exit 1

      - name: Production Smoke Tests
        run: |
          curl -f https://guideme-eg.duckdns.org/ || exit 1
          curl -f https://guideme-eg.duckdns.org/users/login/ || exit 1

      - name: Create deployment record
        run: |
          echo "Deployment completed at $(date)" > deployment-record.txt
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}" >> deployment-record.txt
          echo "Commit: ${{ github.sha }}" >> deployment-record.txt

      - name: Upload deployment record
        uses: actions/upload-artifact@v3
        with:
          name: deployment-record
          path: deployment-record.txt

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Rollback to previous version
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          # railway rollback --service production

  # Post-deployment tasks
  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards..."
          # Add monitoring update commands here

      - name: Clear CDN cache
        run: |
          echo "Clearing CDN cache..."
          # Add CDN cache clearing commands here

      - name: Send notifications
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"ðŸš€ MentorAI successfully deployed to production!"}' \
              $SLACK_WEBHOOK_URL
          fi

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## ðŸš€ Release ${{ github.ref_name }}

            ### ðŸŽ¯ Features
            - Auto-generated release from CI/CD pipeline

            ### ðŸ”§ Technical Details
            - Docker Image: ${{ needs.build-and-push.outputs.image-tag }}
            - Commit: ${{ github.sha }}
            - Deployed to: https://guideme-eg.duckdns.org

            ### ðŸ§ª Testing
            - âœ… Unit tests passed
            - âœ… Integration tests passed
            - âœ… Security scans passed
            - âœ… Performance tests passed
          draft: false
          prerelease: false

  # Database backup (production only)
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Create database backup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "Creating database backup..."
          # Add database backup commands here
          # pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Upload backup to storage
        run: |
          echo "Uploading backup to secure storage..."
          # Add backup upload commands here
