name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.13"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Test
  test:
    name: Lint & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_guideme
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends graphviz

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run linters
        run: |
          black --check . || echo "::warning::Black formatting issues found"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Set up environment
        run: |
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_guideme" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
          echo "GROQ_API_KEY=test-key" >> .env
          echo "GOOGLE_API_KEY=test-key" >> .env
          echo "FLASHCARD=test-key" >> .env
          echo "TESTING=True" >> .env

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests
        run: |
          coverage run --source='.' manage.py test
          coverage report

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Deploy
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "⚠️  RAILWAY_TOKEN not set, skipping deployment"
            exit 0
          fi
          curl -fsSL https://railway.app/install.sh | sh
          export PATH="$HOME/.railway/bin:$PATH"
          railway login --token $RAILWAY_TOKEN
          railway up --detach

      - name: Health Check
        run: |
          sleep 60
          curl -f https://guideme-eg.duckdns.org/health/ || echo "⚠️  Health check endpoint not available"

