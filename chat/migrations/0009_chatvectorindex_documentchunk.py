# Generated by Django 5.2 on 2025-06-22 16:45

import uuid

import django.db.models.deletion
from django.db import connection, migrations, models

import pgvector.django.vector


def create_vector_extension(apps, schema_editor):
    """Create vector extension only for PostgreSQL databases"""
    if schema_editor.connection.vendor == 'postgresql':
        with schema_editor.connection.cursor() as cursor:
            try:
                cursor.execute("""
                    DO $$
                    BEGIN
                        CREATE EXTENSION IF NOT EXISTS vector;
                    EXCEPTION
                        WHEN undefined_file THEN
                            -- Extension files not found, likely in test environment
                            RAISE NOTICE 'Vector extension not available, skipping creation';
                        WHEN others THEN
                            -- Other errors, log but don't fail
                            RAISE NOTICE 'Could not create vector extension: %', SQLERRM;
                    END
                    $$;
                """)
            except Exception as e:
                # Log but don't fail the migration
                print(f"Could not create vector extension: {e}")


def reverse_vector_extension(apps, schema_editor):
    """Remove vector extension only for PostgreSQL databases"""
    if schema_editor.connection.vendor == 'postgresql':
        with schema_editor.connection.cursor() as cursor:
            try:
                cursor.execute("DROP EXTENSION IF EXISTS vector;")
            except Exception as e:
                # Log but don't fail the migration
                print(f"Could not drop vector extension: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0008_message_mixed_content_data'),
    ]

    operations = [
        # Create the vector extension first (PostgreSQL only)
        migrations.RunPython(
            create_vector_extension,
            reverse_vector_extension
        ),
        migrations.CreateModel(
            name='ChatVectorIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('total_chunks', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('embedding_model', models.CharField(
                    default='all-MiniLM-L6-v2', max_length=100)),
                ('chat', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE,
                 related_name='vector_index', to='chat.chat')),
            ],
            options={
                'db_table': 'chat_vector_index',
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4,
                 editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('chunk_index', models.IntegerField()),
                ('embedding', pgvector.django.vector.VectorField(dimensions=384)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                 related_name='document_chunks', to='chat.chat')),
                ('rag_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                 related_name='chunks', to='chat.chatragfile')),
            ],
            options={
                'db_table': 'chat_document_chunks',
                'indexes': [models.Index(fields=['chat', 'chunk_index'], name='chat_docume_chat_id_7655a4_idx'), models.Index(fields=['rag_file'], name='chat_docume_rag_fil_46f24c_idx')],
            },
        ),
    ]
