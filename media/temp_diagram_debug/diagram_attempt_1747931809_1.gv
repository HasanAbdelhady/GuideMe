from graphviz import Digraph

g = Digraph('Deep Learning Roadmap', format='png')
g.attr(rankdir='TB', dpi='300', nodesep='0.7', ranksep='1.1')
g.attr('node', shape='box', style='filled,rounded', fontsize='10', fontname='Helvetica', color='#444444')

# === Color Palette ===
colors = {
    'python': '#A0C4FF',     # soft blue
    'ide': '#B9FBC0',        # light green
    'numpy': '#FFD6A5',      # peach yellow
    'scipy': '#E6CCFF',      # lavender
    'pandas': '#D9F0FF',     # light blue
    'matplotlib': '#E2F7E1', # mint green
    'scikit-learn': '#FFC080', # orange
    'keras': '#8B9467',      # dark green
    'tensorflow': '#6495ED', # blue
    'theano': '#FF69B4',     # pink
    'model': '#F0F0F0',      # white
    'deployment': '#8B9467', # dark green
    'visualization': '#6495ED', # blue
    'monitoring': '#FF69B4',  # pink
}

# === Helper to make styled nodes ===
def styled_node(name, label, fill):
    g.node(name, label, fillcolor=fill)

# === SETTING UP THE ENVIRONMENT ===
styled_node('Python', 'Python 3.x', colors['python'])
styled_node('IDE', 'Python IDE (e.g. PyCharm, VS Code, Spyder)', colors['ide'])
styled_node('Libraries', 'NumPy, SciPy, Pandas, Matplotlib, Scikit-learn, Keras (with TensorFlow or Theano backend)', colors['numpy'])

# === BUILDING A DEEP LEARNING MODEL ===
styled_node('Model', 'Deep Learning Model', colors['model'])
styled_node('Architecture', 'Define model architecture', colors['keras'])
styled_node('Implementation', 'Implement model using Keras or TensorFlow', colors['keras'])
styled_node('Compilation', 'Compile model with optimizer and loss function', colors['keras'])
styled_node('Training', 'Train model using dataset', colors['keras'])
styled_node('Evaluation', 'Evaluate model performance', colors['keras'])

# === VISUALIZING AND DEPLOYING THE MODEL ===
styled_node('Visualization', 'Visualize model performance and results', colors['visualization'])
styled_node('Deployment', 'Deploy model and make predictions on new data', colors['deployment'])
styled_node('Monitoring', 'Monitor and improve model performance', colors['monitoring'])

# === FLOW ===
g.edge('Python', 'IDE')
g.edge('IDE', 'Libraries')
g.edge('Libraries', 'Model')
g.edge('Model', 'Architecture')
g.edge('Architecture', 'Implementation')
g.edge('Implementation', 'Compilation')
g.edge('Compilation', 'Training')
g.edge('Training', 'Evaluation')
g.edge('Evaluation', 'Visualization')
g.edge('Visualization', 'Deployment')
g.edge('Deployment', 'Monitoring')

# === GROUP LABELS ===
with g.subgraph() as environment:
    environment.attr(rank='same')
    environment.node('Python')
    environment.attr(label='<<B>SETTING UP THE ENVIRONMENT</B>>', labelloc='t', style='dashed')

with g.subgraph() as model_building:
    model_building.attr(rank='same')
    model_building.node('Model')
    model_building.attr(label='<<B>BUILDING A DEEP LEARNING MODEL</B>>', labelloc='t', style='dashed')

with g.subgraph() as visualization_and_deployment:
    visualization_and_deployment.attr(rank='same')
    visualization_and_deployment.node('Visualization')
    visualization_and_deployment.attr(label='<<B>VISUALIZING AND DEPLOYING THE MODEL</B>>', labelloc='t', style='dashed')

# === Render ===
g.render('diagram_output', view=False, cleanup=True)
```
This code generates a diagram that represents the 3-step roadmap for building and deploying a Deep Learning model using Python. The diagram includes nodes for each step, as well as edges to represent the flow between steps. The nodes are styled with different colors to represent different concepts, and group labels are used to highlight the main sections of the roadmap.