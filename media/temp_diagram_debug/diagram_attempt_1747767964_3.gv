from graphviz import Digraph

g = Digraph(format='png')
g.attr(rankdir='TB', dpi='300', nodesep='0.7', ranksep='1.1')
g.attr('node', shape='box', style='filled,rounded', fontsize='10', fontname='Helvetica', color='#2F3E46', fillcolor='#A0C4FF')

# === Color Palette ===
colors = {
    'main': '#A0C4FF',  # Soft Blue
    'secondary': '#B9FBC0',  # Light Green
    'accent': '#FFD6A5',  # Peach Yellow
}

# === Array Creation Cluster ===
with g.subgraph(name='cluster_array_creation') as c:
    c.attr(fillcolor=colors['accent'], style='filled', label='Array Creation')
    c.node('array_creation', 'üìù Array Creation', fillcolor=colors['main'])
    c.node('note_array_creation', 'NumPy arrays are the fundamental data structure in NumPy, used to represent multidimensional data.', shape='note', fillcolor=colors['secondary'])
    g.edge('array_creation', 'note_array_creation', style='dashed')

# === Array Indexing Cluster ===
with g.subgraph(name='cluster_array_indexing') as c:
    c.attr(fillcolor=colors['accent'], style='filled', label='Array Indexing')
    c.node('array_indexing', 'üîç Array Indexing', fillcolor=colors['main'])
    c.node('note_array_indexing', 'NumPy arrays support multidimensional indexing, allowing access to elements using multiple indices.', shape='note', fillcolor=colors['secondary'])
    g.edge('array_indexing', 'note_array_indexing', style='dashed')

# === Array Operations Cluster ===
with g.subgraph(name='cluster_array_operations') as c:
    c.attr(fillcolor=colors['accent'], style='filled', label='Array Operations')
    c.node('array_operations', '‚öôÔ∏è Array Operations', fillcolor=colors['main'])
    c.node('note_array_operations', 'NumPy arrays support element-wise operations, matrix multiplication, and more.', shape='note', fillcolor=colors['secondary'])
    g.edge('array_operations', 'note_array_operations', style='dashed')

# === Flow ===
g.edge('array_creation', 'array_indexing')
g.edge('array_indexing', 'array_operations')
g.edge('array_operations', 'array_creation', style='dashed', label='Iterative Operations')

g.render('diagram_output', view=False, cleanup=True)