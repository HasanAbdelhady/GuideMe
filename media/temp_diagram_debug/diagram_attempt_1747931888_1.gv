from graphviz import Digraph

g = Digraph('Deep Learning Roadmap', format='png')
g.attr(rankdir='TB', dpi='300', nodesep='0.7', ranksep='1.1')
g.attr('node', shape='box', style='filled,rounded', fontsize='10', fontname='Helvetica', color='#444444')

# === Color Palette ===
colors = {
    'python': '#A0C4FF',  # soft blue
    'deeplearning': '#B9FBC0',  # light green
    'ide': '#FFD6A5',  # peach yellow
    'library': '#E2F7E1',  # mint green
    'model': '#E6CCFF',  # lavender
    'deployment': '#D9F0FF',  # light blue
    'visualization': '#FFC080',  # orange
}

# === Helper to make styled nodes ===
def styled_node(name, label, fill):
    g.node(name, label, fillcolor=fill)

# === SETTING UP THE ENVIRONMENT ===
styled_node('Python', 'Python 3.x', colors['python'])
styled_node('IDE', 'Python IDE (e.g. PyCharm, VS Code, Spyder)', colors['ide'])
styled_node('Libraries', 'NumPy, Pandas, Scikit-learn, TensorFlow/Keras', colors['library'])

# === BUILDING A DEEP LEARNING MODEL ===
styled_node('Neural Networks', 'Neural Networks', colors['model'])
styled_node('Activation Functions', 'Activation Functions (e.g. ReLU, Sigmoid)', colors['model'])
styled_node('Optimization Algorithms', 'Optimization Algorithms (e.g. SGD, Adam)', colors['model'])
styled_node('Loss Functions', 'Loss Functions (e.g. MSE, Cross-Entropy)', colors['model'])

# === DEPLOYING AND VISUALIZING THE MODEL ===
styled_node('Model Serving', 'Model Serving (e.g. TensorFlow Serving, AWS SageMaker)', colors['deployment'])
styled_node('Containerization', 'Containerization (e.g. Docker)', colors['deployment'])
styled_node('Cloud Deployment', 'Cloud Deployment (e.g. Google Cloud AI Platform, Azure Machine Learning)', colors['deployment'])

styled_node('Visualization', 'Visualization (e.g. Confusion Matrices, ROC Curves)', colors['visualization'])

# === FLOW ===
g.edge('Python', 'IDE')
g.edge('IDE', 'Libraries')
g.edge('Libraries', 'Neural Networks')
g.edge('Neural Networks', 'Activation Functions')
g.edge('Activation Functions', 'Optimization Algorithms')
g.edge('Optimization Algorithms', 'Loss Functions')
g.edge('Loss Functions', 'Model')
g.edge('Model', 'Model Serving')
g.edge('Model Serving', 'Containerization')
g.edge('Containerization', 'Cloud Deployment')
g.edge('Cloud Deployment', 'Visualization')

# === GROUP LABELS ===
with g.subgraph() as environment:
    environment.attr(rank='same')
    environment.node('Python')
    environment.attr(label='<<B>SETTING UP THE ENVIRONMENT</B>>', labelloc='t', style='dashed')

with g.subgraph() as model:
    model.attr(rank='same')
    model.node('Neural Networks')
    model.attr(label='<<B>BUILDING A DEEP LEARNING MODEL</B>>', labelloc='t', style='dashed')

with g.subgraph() as deployment:
    deployment.attr(rank='same')
    deployment.node('Model Serving')
    deployment.attr(label='<<B>DEPLOYING AND VISUALIZING THE MODEL</B>>', labelloc='t', style='dashed')

# === Render ===
g.render('diagram_output', view=False, cleanup=True)
```
This code generates a diagram that represents the 3-step roadmap for building and deploying a Deep Learning model using Python. The diagram includes nodes for each step, as well as edges that represent the flow between steps. The nodes are styled using a color palette that includes soft blue, light green, peach yellow, mint green, lavender, and light blue. The diagram also includes group labels that highlight the main sections of the roadmap.