from graphviz import Digraph

g = Digraph('LLM Diagram', format='png')
g.attr(rankdir='TB', dpi='300', nodesep='0.7', ranksep='1.1')
g.attr('node', shape='box', style='filled,rounded', fontsize='10', fontname='Helvetica')

# Color Palette
colors = {
    'main': '#A0C4FF',  # Soft Blue
    'secondary': '#B9FBC0',  # Light Green
    'accent': '#FFD6A5',  # Peach Yellow
    'text': '#2F3E46'  # Dark Slate Gray
}

# Helper to make styled nodes
def styled_node(name, label, fill):
    g.node(name, label, fillcolor=fill, fontcolor=colors['text'])

# Input Cluster
with g.subgraph(name='cluster_input') as input_cluster:
    input_cluster.attr(style='filled', color=colors['accent'], fillcolor=colors['accent'])
    styled_node('Input', 'üìù Input Text', colors['main'])
    styled_node('InputNote', 'Preprocessed, tokenized, and embedded', colors['secondary'])
    input_cluster.attr(label='Input', labelloc='t')

# Model Architecture Cluster
with g.subgraph(name='cluster_model') as model_cluster:
    model_cluster.attr(style='filled', color=colors['accent'], fillcolor=colors['accent'])
    styled_node('Model', 'ü§ñ Model Architecture', colors['main'])
    styled_node('ModelNote', 'Self-attention and feed-forward networks', colors['secondary'])
    model_cluster.attr(label='Model Architecture', labelloc='t')

# Training Cluster
with g.subgraph(name='cluster_training') as training_cluster:
    training_cluster.attr(style='filled', color=colors['accent'], fillcolor=colors['accent'])
    styled_node('Training', 'üìö Training', colors['main'])
    styled_node('TrainingNote', 'Masked language modeling objective', colors['secondary'])
    training_cluster.attr(label='Training', labelloc='t')

# Output Cluster
with g.subgraph(name='cluster_output') as output_cluster:
    output_cluster.attr(style='filled', color=colors['accent'], fillcolor=colors['accent'])
    styled_node('Output', 'üéØ Output', colors['main'])
    styled_node('OutputNote', 'Generated text, classification label, or representation', colors['secondary'])
    output_cluster.attr(label='Output', labelloc='t')

# Fine-Tuning Cluster
with g.subgraph(name='cluster_fine_tuning') as fine_tuning_cluster:
    fine_tuning_cluster.attr(style='filled', color=colors['accent'], fillcolor=colors['accent'])
    styled_node('FineTuning', 'üîß Fine-Tuning', colors['main'])
    styled_node('FineTuningNote', 'Task-specific adaptation', colors['secondary'])
    fine_tuning_cluster.attr(label='Fine-Tuning', labelloc='t')

# Edges
g.edge('Input', 'Model')
g.edge('Model', 'Training')
g.edge('Training', 'Output')
g.edge('Model', 'FineTuning')
g.edge('FineTuning', 'Output', style='dashed')

# Side notes
g.edge('Input', 'InputNote', style='dashed', dir='none')
g.edge('Model', 'ModelNote', style='dashed', dir='none')
g.edge('Training', 'TrainingNote', style='dashed', dir='none')
g.edge('Output', 'OutputNote', style='dashed', dir='none')
g.edge('FineTuning', 'FineTuningNote', style='dashed', dir='none')

g.render('diagram_output', view=False, cleanup=True)